{
	"info": {
		"_postman_id": "202c8b22-e2d0-4c22-8795-32ade692c99c",
		"name": "Go Rest API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body Response is not null\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).not.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user - No authentication - Falied",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401 - Unauthorized\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var messageReturned = jsonData.data.message;\r",
									"\r",
									"pm.test(\"Body matches data.message: Authentication failed\", function () {\r",
									"    pm.expect(messageReturned).to.include(\"Authentication failed\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User from Brazil\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"user.from.brazil@email.com.br\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user - Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 - Created\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var id_user_returned = jsonData.data.id;\r",
									"var name_user_returned = jsonData.data.name;\r",
									"var email_user_returned = jsonData.data.email;\r",
									"\r",
									"pm.collectionVariables.set(\"id_user\", id_user_returned);\r",
									"pm.collectionVariables.set(\"name_user\", name_user_returned);\r",
									"pm.collectionVariables.set(\"email_user\", email_user_returned);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// função que gera números aleatórios\r",
									"function createRandomNumbers(qtyNumbers) {\r",
									"  var text = \"\";\r",
									"  var possible = \"0123456789\";\r",
									"\r",
									"  for (var i = 0; i < qtyNumbers; i++)\r",
									"    text += possible.charAt(Math.floor(Math.random() * possible.length));\r",
									"\r",
									"  return text;\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"randomNumber\",createRandomNumbers(4));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "22d49283ba904bc1f16ab524624d9eebb40b665334398341dccde17cf05408ab",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"User From Brazil {{randomNumber}}\",\r\n    \"gender\": \"female\",\r\n    \"email\": \"user.from.brazil.{{randomNumber}}@email.com.br\",\r\n    \"status\": \"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "List created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//define variáveis de valores retornados no body response\r",
									"var jsonData = pm.response.json();\r",
									"var id_user_returned = jsonData.data.id;\r",
									"var name_user_returned = jsonData.data.name;\r",
									"var email_user_returned = jsonData.data.email;\r",
									"\r",
									"//valida se valores retornados no body response corresponde aos valores armazenados nas variáveis da coleção\r",
									"pm.test(\"Body matches id, name and email of user previously created\", function () {\r",
									"    pm.expect(id_user_returned).to.eql(pm.collectionVariables.get(\"id_user\"));\r",
									"    pm.expect(name_user_returned).to.eql(pm.collectionVariables.get(\"name_user\"));\r",
									"    pm.expect(email_user_returned).to.include(pm.collectionVariables.get(\"email_user\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/{{id_user}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update created user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 - OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var status_user_returned = jsonData.data.status;\r",
									"\r",
									"pm.collectionVariables.set(\"status_user\", status_user_returned);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "22d49283ba904bc1f16ab524624d9eebb40b665334398341dccde17cf05408ab",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"inactive\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/{{id_user}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"//define variáveis de valores retornados no body response\r",
									"var jsonData = pm.response.json();\r",
									"var id_user_returned = jsonData.data.id;\r",
									"var name_user_returned = jsonData.data.name;\r",
									"var email_user_returned = jsonData.data.email;\r",
									"var status_user_returned = jsonData.data.status;\r",
									"\r",
									"//valida se valores retornados no body response corresponde aos valores armazenados nas variáveis da coleção\r",
									"pm.test(\"Body matches id, name, email and status of user previously updated\", function () {\r",
									"    pm.expect(id_user_returned).to.eql(pm.collectionVariables.get(\"id_user\"));\r",
									"    pm.expect(name_user_returned).to.eql(pm.collectionVariables.get(\"name_user\"));\r",
									"    pm.expect(email_user_returned).to.include(pm.collectionVariables.get(\"email_user\"));\r",
									"    pm.expect(status_user_returned).to.include(pm.collectionVariables.get(\"status_user\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/{{id_user}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204 - No Content\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "74dcbf9812e7a30f3fba45b88acf94545bf8a96fcc30ce1cf19066a297556cb2",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/{{id_user}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"//define variáveis de valores retornados no body response\r",
									"var jsonData = pm.response.json();\r",
									"var messageReturned = jsonData.data.message;\r",
									"\r",
									"//valida se valores retornados no body response corresponde aos valores armazenados nas variáveis da coleção\r",
									"pm.test(\"Body matches data.message: Resource not found\", function () {\r",
									"    pm.expect(messageReturned).to.include(\"Resource not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://gorest.co.in/public/v1/users/{{id_user}}",
							"protocol": "https",
							"host": [
								"gorest",
								"co",
								"in"
							],
							"path": [
								"public",
								"v1",
								"users",
								"{{id_user}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "id_user",
			"value": ""
		},
		{
			"key": "name_user",
			"value": ""
		},
		{
			"key": "email_user",
			"value": ""
		},
		{
			"key": "status_user",
			"value": ""
		}
	]
}